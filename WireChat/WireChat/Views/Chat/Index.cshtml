@model WireChat.ViewModels.ChatViewModel

<section>
    <div class="container-fluid py-5">
        <div class="row">
            <div class="col side-menu">
                @await Component.InvokeAsync("SideMenu")
            </div>
            <div class="col-sm-8 mt-sm-2 ps-lg-5 pe-lg-5">
                @if (Model.ChatDto.ChatType == "OneToOne")
                {
                    var contact = Model.ChatDto.ChatUserDtos.SingleOrDefault(x => x.UserId != Model.CurrentUserId);

                    @await Component.InvokeAsync("Contact", contact)
                }
                else if (Model.ChatDto.ChatType == "Group")
                {
                    @await Component.InvokeAsync("Group", Model.ChatDto.ChatId)
                }
                <div class="chat-container ps-lg-5">
                    <ul id="chatMessageList" class="list-unstyled chat-message-list pe-3 pe-lg-5">
                        @foreach (var chatMessage in Model.ChatDto.ChatMessageDtos)
                        {
                            if (chatMessage.UserId == Model.CurrentUserId)
                            {
                                <li class="chat-right d-flex mb-4">
                                    <div class="card">
                                        <div class="card-header bg-primary text-white d-flex p-3">
                                            <div class="d-flex justify-content-end ms-auto">
                                                <p class="fw-bold mb-0">@chatMessage.UserName</p>
                                                <p class="small ms-3 mb-0"><i class="far fa-clock me-2"></i>@chatMessage.MessageDateTime</p>
                                                <i id="delete-message" class="delete-message fas fa-trash-alt ms-3" title="Delete"></i>
                                                <input id="message-@chatMessage.ChatMessageId" type="hidden" value="@chatMessage.ChatMessageId" />
                                            </div>
                                        </div>
                                        <div class="card-body">
                                            <p class="mb-0">
                                                @chatMessage.Message
                                            </p>
                                        </div>
                                    </div>
                                    <div>
                                        <img src="https://mdbcdn.b-cdn.net/img/Photos/Avatars/avatar-8.webp" alt="avatar"
                                             class="rounded-circle shadow-1-strong ms-1" width="40">
                                    </div>
                                </li>
                            }
                            else
                            {
                                <li class="chat-left d-flex mb-4">
                                    <div>
                                        <img src="https://mdbcdn.b-cdn.net/img/Photos/Avatars/avatar-8.webp" alt="avatar"
                                             class="rounded-circle shadow-1-strong me-1" width="40">
                                    </div>
                                    <div class="card">
                                        <div class="card-header bg-info d-flex justify-content-between p-3">
                                            <p class="fw-bold mb-0">@chatMessage.UserName</p>
                                            <p class="small ms-2 mb-0"><i class="far fa-clock me-1"></i>@chatMessage.MessageDateTime</p>
                                        </div>
                                        <div class="card-body">
                                            <p class="mb-0">
                                                @chatMessage.Message
                                            </p>
                                        </div>
                                    </div>
                                </li>
                            }
                        }
                    </ul>
                </div>
                <div class="chat-form-container col-sm-8 m-auto mt-2">
                    <textarea id="chatMessage" class="form-control modern-textarea" rows="4" placeholder="Send message"></textarea>
                    <button id="sendMessageBtn" type="button" data-mdb-button-init data-mdb-ripple-init class="modern-button me-2 d-inline-block btn-rounded">Send</button>
                </div>
            </div>
            @await Component.InvokeAsync("Notifications")
        </div>
    </div>
</section>

@section Scripts {
    <script src="~/js/signalr/dist/browser/signalr.js"></script>
    <script src="~/lib/jquery/dist/jquery.js"></script>
    <script>

        $("document").ready(() => {

            var connection = new signalR.HubConnectionBuilder()
                .withUrl("/chatHub").build();

            var groupNotificationHub = new signalR.HubConnectionBuilder()
                .withUrl("/groupNotificationHub").build();

            var chatNotificationHub = new signalR.HubConnectionBuilder()
                .withUrl("/chatNotificationHub").build();

            connection.start().then(() => {

                connection.invoke("JoinGroup", "@Model.ChatDto.ChatId");

                $("#sendMessageBtn").click(() => {

                    try {
                        const message = $("#chatMessage").val();

                        const signalRChatMessageDto = {
                            "ChatId": "@Model.ChatDto.ChatId",
                            "UserName": "@ViewContext.HttpContext.User.Identity.Name",
                            "Message": message,
                            "MessageDateTime": getCurrentDateTimeOffset()
                        };

                        connection.invoke("SendMessage", signalRChatMessageDto);

                        $.ajax({
                            type: 'POST',
                            url: '/Chat/PostMessage',
                            data: {
                                "chatId": "@Model.ChatDto.ChatId",
                                "message": message,
                                "dateTime": signalRChatMessageDto.MessageDateTime
                            },
                            failure: function (response) {
                                console.log("Fail", response);
                            },
                            error: function (response) {
                                console.log("Error", response);
                            }
                        });

                    } catch (err) {
                        console.error(err);
                    }
                });

                $(document).on('click', '.delete-message', function () {
                    try {
                        // Get the parent <li> of the clicked delete icon
                        const listItem = $(this).closest('li');

                        // Find the hidden input within the same <li> and get its value
                        const chatMessageId = listItem.find('input[type="hidden"]').val();

                        const signalRRemoveChatMessageDto = {
                            "ChatId": "@Model.ChatDto.ChatId",
                            "ChatMessageId": chatMessageId
                        };

                        connection.invoke("RemoveMessage", signalRRemoveChatMessageDto);

                        $.ajax({
                            type: 'DELETE',
                            url: '/Chat/RemoveMessage',
                            data: {
                                "chatId": "@Model.ChatDto.ChatId",
                                "chatMessageId": chatMessageId
                            },
                            failure: function (response) {
                                console.log("Fail", response);
                            },
                            error: function (response) {
                                console.log("Error", response);
                            }
                        });

                        let signalRRemovedChatMessageNotificationDto = {
                            "ChatId": "@Model.ChatDto.ChatId",
                            "UserName": "@ViewContext.HttpContext.User.Identity.Name",
                            "DateTime": getCurrentDateTimeOffset()
                        };

                        chatNotificationHub.invoke("RemovedChatMessageNotification", signalRRemovedChatMessageNotificationDto);

                        let notificationHubId = $("#notificationHubId").val();

                        $.ajax({
                            type: 'POST',
                            url: '/NotificationHub/AddRemovedChatMessageNotification',
                            data: {
                                "notificationHubId": notificationHubId,
                                "chatId": "@Model.ChatDto.ChatId",
                                "chatMessageId": chatMessageId
                            },
                            failure: function (response) {
                                console.log("Fail", response);
                            },
                            error: function (response) {
                                console.log("Error", response);
                            }
                        });

                    } catch (err) {
                        console.error('Error:', err);
                    }
                });

                connection.on("SendMessage", (message) => {

                    let chatMessage = createChatMessage(message, "@ViewContext.HttpContext.User.Identity.Name");

                    $("#chatMessageList").append(chatMessage);

                    var chatMessageList = $("#chatMessageList");

                    // Scroll to the bottom of the chat message list
                    chatMessageList.animate({
                        scrollTop: chatMessageList[0].scrollHeight
                    }, 500); // Duration in milliseconds
                });

                connection.on("RemoveMessage", (message) => {

                    // Find and remove the <li> with the corresponding ChatMessageId
                    $(`li:has(input[type="hidden"][value="${message.chatMessageId}"])`).remove();
                });

                connection.on("UserAdded", (message) => {

                    const divElement = createGroupMember(message);

                    $("#groupMembers").append(divElement);
                });

                connection.on("UserRemoved", (message) => {

                    $(`#groupMember-${message.userName}`).remove();
                });

                connection.on("BlockedUserRemoved", (message) => {

                    $(`#blockedGroupMember-${message.userName}`).remove();

                    const blockedChatUsersCount = parseInt($("#blockedChatUsersCount").val(), 10);

                    if (blockedChatUsersCount === 0) {

                        $("#groupOptionsBlockedMembers").remove();

                        $("#groupMembers").removeClass('d-none');

                        $("#blockedGroupMembers").addClass('d-none');
                    }
                });

                connection.on("UserBlocked", (message) => {

                    $(`#groupMember-${message.userName}`).remove();

                    const blockedChatUsersCount = parseInt($("#blockedChatUsersCount").val(), 10);

                    if (blockedChatUsersCount === 1) {
                        
                        const blockMembersButton = createBlockMembersButton();

                        $("#groupOptions").append(blockMembersButton);
                    }

                    const blockedGroupMember = createBlockedGroupMember(message);

                    $("#blockedGroupMembers").append(blockedGroupMember);
                });

                connection.on("UserUnblocked", (message) => {

                    $(`#blockedGroupMember-${message.userName}`).remove();

                    const blockedChatUsersCount = parseInt($("#blockedChatUsersCount").val(), 10);

                    if (blockedChatUsersCount === 0) {

                        $("#groupOptionsBlockedMembers").remove();

                        $("#groupMembers").removeClass('d-none');

                        $("#blockedGroupMembers").addClass('d-none');

                        const divElement = createGroupMember(message);

                        $("#groupMembers").append(divElement);
                    }
                });
            }).catch(function (err) {
                return console.error(err.toString());
            });

            groupNotificationHub.start().then(() => {

                const groupMemberGroupId = $("#groupMemberGroupId").val();

                groupNotificationHub.invoke("JoinGroup", groupMemberGroupId);

                groupNotificationHub.on("AddedGroupMemberNotification", (message) => {

                    const divElement = createAddedGroupMemberNotification(message);

                    $("#notificationList").append(divElement);
                });

                groupNotificationHub.on("RemovedGroupMemberNotification", (message) => {

                    const divElement = createRemovedGroupMemberNotification(message);

                    $("#notificationList").append(divElement);
                });

                groupNotificationHub.on("BannedGroupMemberNotification", (message) => {

                    const divElement = createBannedGroupMemberNotification(message);

                    $("#notificationList").append(divElement);
                });
            });

            chatNotificationHub.start().then(() => {

                chatNotificationHub.invoke("JoinGroup", "@Model.ChatDto.ChatId");

                chatNotificationHub.on("RemovedChatMessageNotification", (message) => {

                    const divElement = createRemovedChatMessageNotification(message);

                    $("#notificationList").append(divElement);
                });
            });
        });
    </script>
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - WireChat</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link href='https://fonts.googleapis.com/css?family=Source+Sans+Pro:400,600,700,300' rel='stylesheet' type='text/css'>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/WireChat.styles.css" asp-append-version="true" />
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-sm navbar-light bg-white shadow-sm box-shadow mb-1">
            
            <!-- User info --> 
            <div id="userInfoBtn" class="ms-3 d-inline-block" data-bs-toggle="modal" data-bs-target="#userInfoModal">
                @if (ViewContext.HttpContext.User.Identity.IsAuthenticated)
                {
                    @await Component.InvokeAsync("UserInfo")
                }
            </div>

            <!-- Hamburger Toggle Button -->
            <button class="modern-button navbar-toggler me-3" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" 
                    aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <i class="fas fa-bars"></i>
            </button>

            <!-- Collapsible Navbar Content -->
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav ms-auto">
                    @if (ViewContext.HttpContext.User.Identity.IsAuthenticated)
                    {
                        <li class="nav-item">
                            <!-- Contacts Menu Button for Mobile -->
                            <button id="contactsMenuBtn" class="modern-button d-inline-block d-sm-none me-3" type="button" 
                                data-bs-toggle="modal" data-bs-target="#contactsSideMenuModal">
                                Contacts
                            </button>
                        </li>
                        <li class="nav-item">
                            <a asp-controller="ContactRequest" asp-action="Index" class="modern-button me-2 d-inline-block">Contact Requests</a>
                        </li>
                        <li class="nav-item">
                            <!-- Notifications Menu Button for Mobile -->
                            <button class="modern-button me-2 d-inline-block me-3" type="button"
                                    data-bs-toggle="modal" data-bs-target="#notificationsSideMenuModal">
                                Notifications
                            </button>
                        </li>
                        <li class="nav-item">
                            <button id="newContact" class="modern-button me-2 d-inline-block">New Contact</button>
                        </li>
                        <li class="nav-item">
                            <button id="newGroup" class="modern-button me-2 d-inline-block">New Group</button>
                        </li>
                        <li class="nav-item me-sm-3">
                            <a asp-controller="Home" asp-action="Logout" class="modern-button me-2 d-inline-block">Log Out</a>
                        </li>
                    }
                    else
                    {
                        <li class="nav-item">
                            <a asp-controller="SignIn" asp-action="Index" class="modern-button me-2 d-inline-block">Sign In</a>
                        </li>
                        <li class="nav-item me-sm-3">
                            <a asp-controller="SignUp" asp-action="Index" class="modern-button me-2 d-inline-block">Sign Up</a>
                        </li>
                    }
                </ul>
            </div>
        </nav>
    </header>

    @if (ViewContext.HttpContext.User.Identity.IsAuthenticated)
    {
        @await Component.InvokeAsync("UserSettings")
    }

    <!-- Contacts Menu Modal -->
    <div id="contactsSideMenuModal" class="modal fade" tabindex="-1" aria-labelledby="contactsSideMenuModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="contactsSideMenuModalLabel">Contacts</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    @if (ViewContext.HttpContext.User.Identity.IsAuthenticated)
                    {
                        @await Component.InvokeAsync("SideMenu")
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Groups Menu Modal -->
    <div class="modal fade" id="groupsSideMenuModal" tabindex="-1" aria-labelledby="groupsSideMenuModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="groupsSideMenuModalLabel">Groups</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    @if (ViewContext.HttpContext.User.Identity.IsAuthenticated)
                    {
                        @await Component.InvokeAsync("GroupsSideMenu")
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Notifications Menu Modal -->
    <div class="modal fade" id="notificationsSideMenuModal" tabindex="-1" aria-labelledby="notificationsSideMenuModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="notificationsSideMenuModalLabel">Notifications</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    @if (ViewContext.HttpContext.User.Identity.IsAuthenticated)
                    {
                        @await Component.InvokeAsync("Notifications")
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- New Contact Modal -->
    <div id="newContactModal" class="modal fade" tabindex="-1" aria-labelledby="newContactModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 id="newContactModalLabel" class="modal-title">New Contact</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <input id="contactName" type="text" class="form-control" placeholder="Enter contact name">
                    </div>
                    <div class="mb-3">
                        <textarea id="contactMessage" class="form-control" rows="3" placeholder="Enter a message to the user"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button id="sendContactButton" type="button" class="btn btn-primary">Send</button>
                </div>
            </div>
        </div>
    </div>

    <!-- New Group Modal -->
    <div id="newGroupModal" class="modal fade" tabindex="-1" aria-labelledby="newGroupModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 id="newGroupModalLabel" class="modal-title">New Group</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <input id="groupName" type="text" class="form-control" placeholder="Enter group name">
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button id="createGroupButton" type="button" class="btn btn-primary">Create</button>
                </div>
            </div>
        </div>
    </div>


    <div class="container-fluid">
        <main role="main" class="pb-3">
            @RenderBody()
        </main>
    </div>

    <footer class="border-top footer text-muted mt-5">
        <div class="text-center">
            &copy; 2024 - WireChat - <a asp-area="" asp-controller="Home" asp-action="Privacy">Privacy</a>
        </div>
    </footer>
    <script src="https://use.typekit.net/hoy3lrg.js"></script>
    <script src="~/js/signalr/dist/browser/signalr.js"></script>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    <script>
        $("document").ready(() => {
            var connection = new signalR.HubConnectionBuilder()
                .withUrl("/contactHub").build();

            var chatHubConnection = new signalR.HubConnectionBuilder()
                .withUrl("/chatHub").build();

            var userNotificationHub = new signalR.HubConnectionBuilder()
                .withUrl("/userNotificationHub").build();

            var groupNotificationHub = new signalR.HubConnectionBuilder()
                .withUrl("/groupNotificationHub").build();

            chatHubConnection.start();

            groupNotificationHub.start();

            userNotificationHub.start().then(() => {

                userNotificationHub.invoke("JoinGroup", "@ViewContext.HttpContext.User.Identity.Name");
            });

            

            connection.start().then(() => {

                $("#newContact").click(() => {

                    console.log("newContact");

                    $('#newContactModal').modal('show');
                });

                $("#newGroup").click(() => {

                    $('#newGroupModal').modal('show');
                });

                $("#sendContactButton").click(() => {

                    const contactName = $("#contactName").val();

                    const contactMessage = $("#contactMessage").val();

                    let signalRContactRequestDto = {
                        "SenderUserName": "@ViewContext.HttpContext.User.Identity.Name",
                        "ReceiverUserName": contactName,
                        "ContactMessage": contactMessage,
                        "DateTime": getCurrentDateTimeOffset()
                    };

                    connection.invoke("ReceivedContactRequest", signalRContactRequestDto);

                    $.ajax({
                        type: 'POST',
                        url: '/ContactRequest/IssueContactRequest',
                        data: {
                            "contactRequestDto": signalRContactRequestDto
                        },
                        failure: function (response) {
                            console.log("Fail", response);
                        },
                        error: function (response) {
                            console.log("Error", response);
                        }
                    });

                    let signalRIssuedContactRequestNotificationDto = {
                        "SenderUserName": "@ViewContext.HttpContext.User.Identity.Name",
                        "ReceiverUserName": contactName,
                        "DateTime": getCurrentDateTimeOffset()
                    };

                    userNotificationHub.invoke("IssuedContactRequestNotification", signalRIssuedContactRequestNotificationDto);

                    let notificationHubId = $("#notificationHubId").val();

                    $.ajax({
                        type: 'POST',
                        url: '/NotificationHub/AddIssuedContactRequestNotification',
                        data: {
                            "notificationHubId": notificationHubId,
                            "receiverUserName": contactName
                        },
                        failure: function (response) {
                            console.log("Fail", response);
                        },
                        error: function (response) {
                            console.log("Error", response);
                        }
                    });

                    // Close the modal after sending the contact
                    $('#newContactModal').modal('hide');
                });

                $("#createGroupButton").click(() => {

                    const groupName = $("#groupName").val();

                    $.ajax({
                        type: 'POST',
                        url: '/Group/AddCroup',
                        data: {
                            "groupName": groupName
                        },
                        success: function  (response) {
                            $.ajax({
                                type: 'GET',
                                url: '/Group/GetGroupByName',
                                data: {
                                    "groupName": groupName
                                },
                                success: function(response) {

                                    let notificationHubId = $("#notificationHubId").val();

                                    $.ajax({
                                        type: 'POST',
                                        url: '/NotificationHub/AddCreatedGroupNotification',
                                        data: {
                                            "notificationHubId": notificationHubId,
                                            "groupId": response.groupId
                                        },
                                        failure: function (response) {
                                            console.log("Fail", response);
                                        },
                                        error: function (response) {
                                            console.log("Error", response);
                                        }
                                    });
                                },
                                failure: function (response) {
                                    console.log("Fail", response);
                                },
                                error: function (response) {
                                    console.log("Error", response);
                                }
                            });
                        },
                        failure: function (response) {
                            console.log("Fail", response);
                        },
                        error: function (response) {
                            console.log("Error", response);
                        }
                    });

                    let signalRCreatedGroupNotificationDto = {
                        "UserName": "@ViewContext.HttpContext.User.Identity.Name",
                        "GroupName": groupName,
                        "DateTime": getCurrentDateTimeOffset()
                    };

                    userNotificationHub.invoke("CreatedGroupNotification", signalRCreatedGroupNotificationDto);

                    // Close the modal after sending the contact
                    $('#newContactModal').modal('hide');
                });
            }).catch(function (err) {
                return console.error(err.toString());
            });

            $("#siteIconNav").click(() => {

                @if (ViewContext.HttpContext.User.Identity.IsAuthenticated)
                {
                    <text>
                        $("#siteIconNav").addClass("siteIconNav");

                        window.location.href = '@Url.Action("Index", "Main")';
                    </text>
                }
            });

            $("#addGroupMemberBtn").click(() => {

                const groupMemberGroupId = $("#groupMemberGroupId").val();

                const newGroupMemberUserName = $("#newGroupMemberUserName").val();

                const groupName = $("#group-name").val();

                $.ajax({
                    type: 'POST',
                    url: '/Group/AddCroupMember',
                    data: {
                        "chatId": groupMemberGroupId,
                        "userName": newGroupMemberUserName
                    },
                    success: function (response) {
                        $.ajax({
                            type: 'GET',
                            url: '/Group/GetGroupMember',
                            data: {
                                "chatId": groupMemberGroupId,
                                "userName": newGroupMemberUserName
                            },
                            success: function (response) {

                                if (response != null) {

                                    chatHubConnection.invoke("UserAdded", response);
                                }
                            },
                            failure: function (response) {
                                console.log("Fail", response);
                            },
                            error: function (response) {
                                console.log("Error", response);
                            }
                        });
                    },
                    failure: function (response) {
                        console.log("Fail", response);
                    },
                    error: function (response) {
                        console.log("Error", response);
                    }
                });

                let signalRAddedGroupMemberNotificationDto = {
                    "GroupId": groupMemberGroupId,
                    "GroupName": groupName,
                    "GroupAdminUserName": "@ViewContext.HttpContext.User.Identity.Name",
                    "GroupMemberUserName": newGroupMemberUserName,
                    "DateTime": getCurrentDateTimeOffset()
                };

                groupNotificationHub.invoke("AddedGroupMemberNotification", signalRAddedGroupMemberNotificationDto);

                $.ajax({
                    type: 'GET',
                    url: '/Group/GetGroupByName',
                    data: {
                        "groupName": groupName
                    },
                    success: function (response) {

                        let notificationHubId = $("#notificationHubId").val();

                        $.ajax({
                            type: 'POST',
                            url: '/NotificationHub/AddAddedGroupMemberNotification',
                            data: {
                                "notificationHubId": notificationHubId,
                                "groupMemberUserName": newGroupMemberUserName,
                                "groupId": response.groupId
                            },
                            failure: function (response) {
                                console.log("Fail", response);
                            },
                            error: function (response) {
                                console.log("Error", response);
                            }
                        });
                    },
                    failure: function (response) {
                        console.log("Fail", response);
                    },
                    error: function (response) {
                        console.log("Error", response);
                    }
                });
            });

            $(document).on('click', '[id^="removeGroupMemberBtn-"]', function () {

                const groupMemberGroupId = $("#groupMemberGroupId").val();

                const groupMemberUserName = this.id.replace(/.*-/, ''); // Get what comes after the dash

                const groupName = $("#group-name").val();

                $.ajax({
                    type: 'DELETE',
                    url: '/Group/RemoveCroupMember',
                    data: {
                        "chatId": groupMemberGroupId,
                        "userName": groupMemberUserName
                    },
                    failure: function (response) {
                        console.log("Fail", response);
                    },
                    error: function (response) {
                        console.log("Error", response);
                    }
                });

                const signalRRemoveChatUserDto = {
                    "ChatId": groupMemberGroupId,
                    "UserName": groupMemberUserName
                };

                chatHubConnection.invoke("UserRemoved", signalRRemoveChatUserDto);
                
                let signalRRemovedGroupMemberNotificationDto = {
                    "GroupAdminUserName": "@ViewContext.HttpContext.User.Identity.Name",
                    "GroupMemberUserName": groupMemberUserName,
                    "GroupId": groupMemberGroupId,
                    "GroupName": groupName,
                    "DateTime": getCurrentDateTimeOffset()
                };

                groupNotificationHub.invoke("RemovedGroupMemberNotification", signalRRemovedGroupMemberNotificationDto);

                let notificationHubId = $("#notificationHubId").val();

                $.ajax({
                    type: 'DELETE',
                    url: '/NotificationHub/RemoveAddedGroupMemberNotification',
                    data: {
                        "notificationHubId": notificationHubId,
                        "groupMemberUserName": groupMemberUserName
                    },
                    failure: function (response) {
                        console.log("Fail", response);
                    },
                    error: function (response) {
                        console.log("Error", response);
                    }
                });
            });

            $(document).on('click', '[id^="removeBlokedGroupMemberBtn-"]', function () {

                const groupMemberGroupId = $("#groupMemberGroupId").val();

                const blockedGroupMemberUserName = this.id.replace(/.*-/, ''); // Get what comes after the dash

                const blockedGroupMemberUserId = $(`#blockedGroupMemberUserId-${blockedGroupMemberUserName}`).val();

                let blockedChatUsersCount = $("#blockedChatUsersCount").val();

                blockedChatUsersCount -= 1;

                $("#blockedChatUsersCount").val(blockedChatUsersCount);

                $.ajax({
                    type: 'DELETE',
                    url: '/Chat/UnblockChatUser',
                    data: {
                        "chatId": groupMemberGroupId,
                        "userId": blockedGroupMemberUserId
                    },
                    success: function (response) {
                        $.ajax({
                            type: 'DELETE',
                            url: '/Group/RemoveCroupMember',
                            data: {
                                "chatId": groupMemberGroupId,
                                "userName": blockedGroupMemberUserName
                            },
                            failure: function (response) {
                                console.log("Fail", response);
                            },
                            error: function (response) {
                                console.log("Error", response);
                            }
                        });
                    },
                    failure: function (response) {
                        console.log("Fail", response);
                    },
                    error: function (response) {
                        console.log("Error", response);
                    }
                });

                const signalRRemoveChatUserDto = {
                    "ChatId": groupMemberGroupId,
                    "UserName": blockedGroupMemberUserName
                };

                chatHubConnection.invoke("BlockedUserRemoved", signalRRemoveChatUserDto);

                // TODO - RemoveBannedGroupMemberNotification
            });

            $(document).on('click', '[id^="blockGroupMemberBtn-"]', function () {

                const groupMemberGroupId = $("#groupMemberGroupId").val();

                const groupMemberUserName = this.id.replace(/.*-/, ''); // Get what comes after the dash

                const groupMemberUserId = $(`#groupMemberUserId-${groupMemberUserName}`).val();

                const groupName = $("#group-name").val();

                let blockedChatUsersCount = $("#blockedChatUsersCount").val();

                blockedChatUsersCount += 1;

                $("#blockedChatUsersCount").val(blockedChatUsersCount);

                $.ajax({
                    type: 'POST',
                    url: '/Chat/BlockUser',
                    data: {
                        "chatId": groupMemberGroupId,
                        "userId": groupMemberUserId
                    },
                    failure: function (response) {
                        console.log("Fail", response);
                    },
                    error: function (response) {
                        console.log("Error", response);
                    }
                });

                const signalRRemoveChatUserDto = {
                    "ChatId": groupMemberGroupId,
                    "UserId": groupMemberUserId,
                    "UserName": groupMemberUserName
                };

                chatHubConnection.invoke("UserBlocked", signalRRemoveChatUserDto);

                let signalRBannedGroupMemberNotificationDto = {
                    "GroupId": groupMemberGroupId,
                    "GroupName": groupName,
                    "GroupAdminUserName": "@ViewContext.HttpContext.User.Identity.Name",
                    "GroupMemberUserName": groupMemberUserName,
                    "DateTime": getCurrentDateTimeOffset()
                };

                groupNotificationHub.invoke("BannedGroupMemberNotification", signalRBannedGroupMemberNotificationDto);

                $.ajax({
                    type: 'GET',
                    url: '/Group/GetGroupByName',
                    data: {
                        "groupName": groupName
                    },
                    success: function (response) {

                        let notificationHubId = $("#notificationHubId").val();

                        $.ajax({
                            type: 'POST',
                            url: '/NotificationHub/AddBannedGroupMemberNotification',
                            data: {
                                "notificationHubId": notificationHubId,
                                "groupMemberUserName": groupMemberUserName,
                                "groupId": response.groupId
                            },
                            failure: function (response) {
                                console.log("Fail", response);
                            },
                            error: function (response) {
                                console.log("Error", response);
                            }
                        });
                    },
                    failure: function (response) {
                        console.log("Fail", response);
                    },
                    error: function (response) {
                        console.log("Error", response);
                    }
                }); 
            });

            $("#groupMembersBtn").click(() => {

                $("#groupMembers").removeClass('d-none');

                $("#blockedGroupMembers").addClass('d-none');
                
                $("#groupMembersBtn").addClass('pulse-animation');

                setTimeout(() => {
                    $("#groupMembersBtn").removeClass('pulse-animation');
                }, 500); 
            });

            $("#groupOptions").on("click", "#blockedGroupMembersBtn", function () {
                
                $("#groupMembers").addClass('d-none');

                $("#blockedGroupMembers").removeClass('d-none');

                $(this).addClass('pulse-animation');

                setTimeout(() => {
                    $(this).removeClass('pulse-animation');
                }, 500);
            });

            $(document).on('click', '[id^="unblockGroupMemberBtn-"]', function () {

                const groupMemberGroupId = $("#groupMemberGroupId").val();

                const blockedGroupMemberUserName = this.id.replace(/.*-/, ''); // Get what comes after the dash

                const blockedGroupMemberUserId = $(`#blockedGroupMemberUserId-${blockedGroupMemberUserName}`).val();

                let blockedChatUsersCount = $("#blockedChatUsersCount").val();

                blockedChatUsersCount -= 1;

                $("#blockedChatUsersCount").val(blockedChatUsersCount);

                $.ajax({
                    type: 'DELETE',
                    url: '/Chat/UnblockChatUser',
                    data: {
                        "chatId": groupMemberGroupId,
                        "userId": blockedGroupMemberUserId
                    },
                    failure: function (response) {
                        console.log("Fail", response);
                    },
                    error: function (response) {
                        console.log("Error", response);
                    }
                });

                const signalRRemoveChatUserDto = {
                    "ChatId": groupMemberGroupId,
                    "UserId": blockedGroupMemberUserId,
                    "UserName": blockedGroupMemberUserName
                };

                chatHubConnection.invoke("UserUnblocked", signalRRemoveChatUserDto);
            });

            $(document).on('click', '[id^="removeIssuedContactRequestNotification-"]', function () {

                const receiverUserName = this.id.replace(/.*-/, ''); // Get what comes after the dash

                const notificationHubId = $("#notificationHubId").val();

                $.ajax({
                    type: 'DELETE',
                    url: '/NotificationHub/RemoveIssuedContactRequestNotification',
                    data: {
                        "notificationHubId": notificationHubId,
                        "receiverUserName": receiverUserName
                    },
                    success: function (response) {

                        const divElement = $(`#removeIssuedContactRequestNotification-${receiverUserName}`);

                        divElement.closest('.col-12').remove();
                    },
                    failure: function (response) {
                        console.log("Fail", response);
                    },
                    error: function (response) {
                        console.log("Error", response);
                    }
                });
            });

            $(document).on('click', '[id^="removeReceivedContactRequestNotification-"]', function () {

                const senderUserName = this.id.replace(/.*-/, ''); // Get what comes after the dash

                const notificationHubId = $("#notificationHubId").val();

                $.ajax({
                    type: 'DELETE',
                    url: '/NotificationHub/RemoveReceivedContactRequestNotification',
                    data: {
                        "notificationHubId": notificationHubId,
                        "senderUserName": senderUserName
                    },
                    success: function (response) {

                        const divElement = $(`#removeReceivedContactRequestNotification-${senderUserName}`);

                        divElement.closest('.col-12').remove();
                    },
                    failure: function (response) {
                        console.log("Fail", response);
                    },
                    error: function (response) {
                        console.log("Error", response);
                    }
                });
            });

            $(document).on('click', '[id^="removeAcceptedContactRequestNotification-"]', function () {

                const senderUserName = this.id.replace(/.*-/, ''); // Get what comes after the dash

                const notificationHubId = $("#notificationHubId").val();

                $.ajax({
                    type: 'DELETE',
                    url: '/NotificationHub/RemoveAcceptedContactRequestNotification',
                    data: {
                        "notificationHubId": notificationHubId,
                        "senderUserName": senderUserName
                    },
                    success: function (response) {

                        const divElement = $(`#removeAcceptedContactRequestNotification-${senderUserName}`);

                        divElement.closest('.col-12').remove();
                    },
                    failure: function (response) {
                        console.log("Fail", response);
                    },
                    error: function (response) {
                        console.log("Error", response);
                    }
                });
            });

            $(document).on('click', '[id^="removeDeclinedContactRequestNotification-"]', function () {

                const senderUserName = this.id.replace(/.*-/, ''); // Get what comes after the dash

                const notificationHubId = $("#notificationHubId").val();

                $.ajax({
                    type: 'DELETE',
                    url: '/NotificationHub/RemoveDeclinedContactRequestNotification',
                    data: {
                        "notificationHubId": notificationHubId,
                        "senderUserName": senderUserName
                    },
                    success: function (response) {

                        const divElement = $(`#removeDeclinedContactRequestNotification-${senderUserName}`);

                        divElement.closest('.col-12').remove();
                    },
                    failure: function (response) {
                        console.log("Fail", response);
                    },
                    error: function (response) {
                        console.log("Error", response);
                    }
                });
            });

            $(document).on('click', '[id^="removeCreatedGroupNotification-"]', function () {

                const groupName = this.id.replace(/.*-/, ''); // Get what comes after the dash

                const notificationHubId = $("#notificationHubId").val();

                const groupId = $(`#removeCreatedGroupNotificationGroupId-${groupName}`).val();

                $.ajax({
                    type: 'DELETE',
                    url: '/NotificationHub/RemoveCreatedGroupNotification',
                    data: {
                        "notificationHubId": notificationHubId,
                        "groupId": groupId
                    },
                    success: function (response) {

                        const divElement = $(`#removeCreatedGroupNotification-${groupName}`);

                        divElement.closest('.col-12').remove();
                    },
                    failure: function (response) {
                        console.log("Fail", response);
                    },
                    error: function (response) {
                        console.log("Error", response);
                    }
                });
            });

            $(document).on('click', '[id^="removeAddedGroupMemberNotification-"]', function () {

                const groupMemberUserName = this.id.replace(/.*-/, ''); // Get what comes after the dash

                const notificationHubId = $("#notificationHubId").val();

                $.ajax({
                    type: 'DELETE',
                    url: '/NotificationHub/RemoveAddedGroupMemberNotification',
                    data: {
                        "notificationHubId": notificationHubId,
                        "groupMemberUserName": groupMemberUserName
                    },
                    success: function (response) {

                        const divElement = $(`#removeAddedGroupMemberNotification-${groupMemberUserName}`);

                        divElement.closest('.col-12').remove();
                    },
                    failure: function (response) {
                        console.log("Fail", response);
                    },
                    error: function (response) {
                        console.log("Error", response);
                    }
                });
            });

            $(document).on('click', '[id^="removeRemovedGroupMemberNotification-"]', function () {

                const groupMemberUserName = this.id.replace(/.*-/, ''); // Get what comes after the dash

                const notificationHubId = $("#notificationHubId").val();

                $.ajax({
                    type: 'DELETE',
                    url: '/NotificationHub/RemoveRemovedGroupMemberNotification',
                    data: {
                        "notificationHubId": notificationHubId,
                        "groupMemberUserName": groupMemberUserName
                    },
                    success: function (response) {

                        const divElement = $(`#removeRemovedGroupMemberNotification-${groupMemberUserName}`);

                        divElement.closest('.col-12').remove();
                    },
                    failure: function (response) {
                        console.log("Fail", response);
                    },
                    error: function (response) {
                        console.log("Error", response);
                    }
                });
            });

            $(document).on('click', '[id^="removeBannedContactNotification-"]', function () {

                const userName = this.id.replace(/.*-/, ''); // Get what comes after the dash

                const notificationHubId = $("#notificationHubId").val();

                $.ajax({
                    type: 'DELETE',
                    url: '/NotificationHub/RemoveBannedContactNotification',
                    data: {
                        "notificationHubId": notificationHubId,
                        "contactUserName": userName
                    },
                    success: function (response) {

                        const divElement = $(`#removeBannedContactNotification-${userName}`);

                        divElement.closest('.col-12').remove();
                    },
                    failure: function (response) {
                        console.log("Fail", response);
                    },
                    error: function (response) {
                        console.log("Error", response);
                    }
                });
            });

            $(document).on('click', '[id^="removeBannedGroupMemberNotification-"]', function () {

                const groupMemberUserName = this.id.replace(/.*-/, ''); // Get what comes after the dash

                const notificationHubId = $("#notificationHubId").val();

                $.ajax({
                    type: 'DELETE',
                    url: '/NotificationHub/RemoveBannedGroupMemberNotification',
                    data: {
                        "notificationHubId": notificationHubId,
                        "groupMemberUserName": groupMemberUserName
                    },
                    success: function (response) {

                        const divElement = $(`#removeBannedGroupMemberNotification-${groupMemberUserName}`);

                        divElement.closest('.col-12').remove();
                    },
                    failure: function (response) {
                        console.log("Fail", response);
                    },
                    error: function (response) {
                        console.log("Error", response);
                    }
                });
            });

            $(document).on('click', '[id^="removeRemovedChatMessageNotification-"]', function () {

                const chatMessageId = this.id.replace(/.*-/, ''); // Get what comes after the dash

                const notificationHubId = $("#notificationHubId").val();

                $.ajax({
                    type: 'DELETE',
                    url: '/NotificationHub/RemoveRemovedChatMessageNotification',
                    data: {
                        "notificationHubId": notificationHubId,
                        "chatMessageId": chatMessageId
                    },
                    success: function (response) {

                        const divElement = $(`#removeRemovedChatMessageNotification-${chatMessageId}`);

                        divElement.closest('.col-12').remove();
                    },
                    failure: function (response) {
                        console.log("Fail", response);
                    },
                    error: function (response) {
                        console.log("Error", response);
                    }
                });
            });

            $.ajax({
                type: 'GET',
                url: '/UserSettings/FetchRoboHashImages',
                data: {},
                success: function (response) {

                    if(response != null)
                    {
                        let imageContainer = $("#userImages");

                        // Loop through the response, which contains base64 image strings
                        response.forEach(function (base64String) {

                            // Create a new div element
                            let div = document.createElement('div');
                            div.classList.add('col-4', 'mb-3');

                            // Create a new img element
                            const img = document.createElement('img');
                            img.src = `data:image/png;base64,${base64String}`;
                            img.classList.add('selectable-image', 'img-fluid', 'border');

                            img.style.width = "100px";
                            img.style.height = "100px";

                            img.setAttribute('data-img-url', `data:image/png;base64,${base64String}`);

                            div.append(img);
                            imageContainer.append(div);
                        });
                    }
                },
                failure: function (response) {
                    console.log("Fail", response);
                },
                error: function (response) {
                    console.log("Error", response);
                }
            });

            $("#userInfoAccountBtn").click(() => {

                $("#images-container").removeClass('d-none');

                $("#userInfoAccountBtn").addClass('pulse-animation');

                setTimeout(() => {
                    $("#userInfoAccountBtn").removeClass('pulse-animation');
                }, 500);
            });

            $(document).on('click', '.selectable-image', function () {

                const selectedImageUrl = $(this).attr('data-img-url'); 

                // Set the selected image in the placeholder
                $('#selectedImage').attr('src', selectedImageUrl);
            });

            userNotificationHub.on("CreatedGroupNotification", (message) => {

                const divElement = createGroupNotification(message);

                $("#notificationList").append(divElement);
            });

            userNotificationHub.on("IssuedContactRequestNotification", (message) => {

                const divElement = createIssuedContactRequestNotification(message);

                $("#notificationList").append(divElement);
            });

            userNotificationHub.on("ReceivedContactRequestNotification", (message) => {

                const divElement = createReceivedContactRequestNotification(message);

                $("#notificationList").append(divElement);
            });

            userNotificationHub.on("AcceptedContactRequestNotification", (message) => {

                const divElement = createdAcceptedContactRequestNotification(message);

                $("#notificationList").append(divElement);
            });
        });
    </script>
    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>
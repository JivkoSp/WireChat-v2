// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WireChat.Infrastructure.EntityFramework.Contexts;

#nullable disable

namespace WireChat.Infrastructure.EntityFramework.Migrations
{
    [DbContext(typeof(ReadDbContext))]
    [Migration("20240912134631_Added UserPicture to the UserReadModel")]
    partial class AddedUserPicturetotheUserReadModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("wirechat")
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", "wirechat");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "wirechat");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "wirechat");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "wirechat");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "wirechat");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "wirechat");
                });

            modelBuilder.Entity("WireChat.Infrastructure.EntityFramework.Models.AcceptedContactRequestNotificationReadModel", b =>
                {
                    b.Property<string>("SenderUserId")
                        .HasColumnType("text");

                    b.Property<string>("ReceiverUserId")
                        .HasColumnType("text");

                    b.Property<string>("DateTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("NotificationHubId")
                        .HasColumnType("uuid");

                    b.HasKey("SenderUserId", "ReceiverUserId");

                    b.HasIndex("NotificationHubId");

                    b.HasIndex("ReceiverUserId");

                    b.ToTable("AcceptedContactRequestNotification", "wirechat");
                });

            modelBuilder.Entity("WireChat.Infrastructure.EntityFramework.Models.ActiveGroupNotificationReadModel", b =>
                {
                    b.Property<Guid>("ActiveGroupNotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("NotificationHubId")
                        .HasColumnType("uuid");

                    b.HasKey("ActiveGroupNotificationId");

                    b.HasIndex("GroupId");

                    b.HasIndex("NotificationHubId");

                    b.ToTable("ActiveGroupNotification", "wirechat");
                });

            modelBuilder.Entity("WireChat.Infrastructure.EntityFramework.Models.AddedGroupMemberNotificationReadModel", b =>
                {
                    b.Property<string>("GroupAdminUserId")
                        .HasColumnType("text");

                    b.Property<string>("GroupMemberUserId")
                        .HasColumnType("text");

                    b.Property<string>("DateTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("NotificationHubId")
                        .HasColumnType("uuid");

                    b.HasKey("GroupAdminUserId", "GroupMemberUserId");

                    b.HasIndex("GroupId");

                    b.HasIndex("GroupMemberUserId");

                    b.HasIndex("NotificationHubId");

                    b.ToTable("AddedGroupMemberNotification", "wirechat");
                });

            modelBuilder.Entity("WireChat.Infrastructure.EntityFramework.Models.BannedContactNotificationReadModel", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ChatUserReadModelChatId")
                        .HasColumnType("uuid");

                    b.Property<string>("ChatUserReadModelUserId")
                        .HasColumnType("text");

                    b.Property<string>("DateTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("NotificationHubId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "ChatId");

                    b.HasIndex("ChatId");

                    b.HasIndex("NotificationHubId");

                    b.HasIndex("ChatUserReadModelUserId", "ChatUserReadModelChatId");

                    b.ToTable("BannedContactNotification", "wirechat");
                });

            modelBuilder.Entity("WireChat.Infrastructure.EntityFramework.Models.BannedGroupMemberNotificationReadModel", b =>
                {
                    b.Property<string>("GroupAdminUserId")
                        .HasColumnType("text");

                    b.Property<string>("GroupMemberUserId")
                        .HasColumnType("text");

                    b.Property<string>("DateTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<string>("GroupMemberId")
                        .HasColumnType("text");

                    b.Property<Guid>("NotificationHubId")
                        .HasColumnType("uuid");

                    b.HasKey("GroupAdminUserId", "GroupMemberUserId");

                    b.HasIndex("GroupId");

                    b.HasIndex("GroupMemberId");

                    b.HasIndex("NotificationHubId");

                    b.ToTable("BannedGroupMemberNotification", "wirechat");
                });

            modelBuilder.Entity("WireChat.Infrastructure.EntityFramework.Models.BlockedChatUserReadModel", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "ChatId");

                    b.HasIndex("ChatId");

                    b.ToTable("BlockedChatUser", "wirechat");
                });

            modelBuilder.Entity("WireChat.Infrastructure.EntityFramework.Models.ChatMessageReadModel", b =>
                {
                    b.Property<Guid>("ChatMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uuid");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MessageDateTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("ChatMessageId");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("ChatMessage", "wirechat");
                });

            modelBuilder.Entity("WireChat.Infrastructure.EntityFramework.Models.ChatReadModel", b =>
                {
                    b.Property<Guid>("ChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ChatType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("ChatId");

                    b.ToTable("Chat", "wirechat");
                });

            modelBuilder.Entity("WireChat.Infrastructure.EntityFramework.Models.ChatUserReadModel", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "ChatId");

                    b.HasIndex("ChatId");

                    b.ToTable("ChatUser", "wirechat");
                });

            modelBuilder.Entity("WireChat.Infrastructure.EntityFramework.Models.CreatedGroupNotificationReadModel", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<string>("DateTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("NotificationHubId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.HasIndex("NotificationHubId");

                    b.ToTable("CreatedGroupNotification", "wirechat");
                });

            modelBuilder.Entity("WireChat.Infrastructure.EntityFramework.Models.DeclinedContactRequestNotificationReadModel", b =>
                {
                    b.Property<string>("SenderUserId")
                        .HasColumnType("text");

                    b.Property<string>("ReceiverUserId")
                        .HasColumnType("text");

                    b.Property<string>("DateTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("NotificationHubId")
                        .HasColumnType("uuid");

                    b.HasKey("SenderUserId", "ReceiverUserId");

                    b.HasIndex("NotificationHubId");

                    b.HasIndex("ReceiverUserId");

                    b.ToTable("DeclinedContactRequestNotification", "wirechat");
                });

            modelBuilder.Entity("WireChat.Infrastructure.EntityFramework.Models.GroupReadModel", b =>
                {
                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("GroupId");

                    b.ToTable("Group", "wirechat");
                });

            modelBuilder.Entity("WireChat.Infrastructure.EntityFramework.Models.IssuedContactRequestNotificationReadModel", b =>
                {
                    b.Property<string>("SenderUserId")
                        .HasColumnType("text");

                    b.Property<string>("ReceiverUserId")
                        .HasColumnType("text");

                    b.Property<string>("DateTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("NotificationHubId")
                        .HasColumnType("uuid");

                    b.HasKey("SenderUserId", "ReceiverUserId");

                    b.HasIndex("NotificationHubId");

                    b.HasIndex("ReceiverUserId");

                    b.ToTable("IssuedContactRequestNotification", "wirechat");
                });

            modelBuilder.Entity("WireChat.Infrastructure.EntityFramework.Models.NotificationHubReadModel", b =>
                {
                    b.Property<Guid>("NotificationHubId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("NotificationHubId");

                    b.ToTable("NotificationHub", "wirechat");
                });

            modelBuilder.Entity("WireChat.Infrastructure.EntityFramework.Models.ReceivedContactRequestNotificationReadModel", b =>
                {
                    b.Property<string>("SenderUserId")
                        .HasColumnType("text");

                    b.Property<string>("ReceiverUserId")
                        .HasColumnType("text");

                    b.Property<string>("DateTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("NotificationHubId")
                        .HasColumnType("uuid");

                    b.HasKey("SenderUserId", "ReceiverUserId");

                    b.HasIndex("NotificationHubId");

                    b.HasIndex("ReceiverUserId");

                    b.ToTable("ReceivedContactRequestNotification", "wirechat");
                });

            modelBuilder.Entity("WireChat.Infrastructure.EntityFramework.Models.RemovedChatMessageNotificationReadModel", b =>
                {
                    b.Property<Guid>("ChatId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChatMessageId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ChatUserReadModelChatId")
                        .HasColumnType("uuid");

                    b.Property<string>("ChatUserReadModelUserId")
                        .HasColumnType("text");

                    b.Property<string>("DateTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("NotificationHubId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("ChatId", "ChatMessageId");

                    b.HasIndex("ChatMessageId")
                        .IsUnique();

                    b.HasIndex("NotificationHubId");

                    b.HasIndex("UserId");

                    b.HasIndex("ChatUserReadModelUserId", "ChatUserReadModelChatId");

                    b.ToTable("RemovedChatMessageNotification", "wirechat");
                });

            modelBuilder.Entity("WireChat.Infrastructure.EntityFramework.Models.RemovedGroupMemberNotificationReadModel", b =>
                {
                    b.Property<string>("GroupAdminUserId")
                        .HasColumnType("text");

                    b.Property<string>("GroupMemberUserId")
                        .HasColumnType("text");

                    b.Property<string>("DateTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("NotificationHubId")
                        .HasColumnType("uuid");

                    b.HasKey("GroupAdminUserId", "GroupMemberUserId");

                    b.HasIndex("GroupId");

                    b.HasIndex("GroupMemberUserId");

                    b.HasIndex("NotificationHubId");

                    b.ToTable("RemovedGroupMemberNotification", "wirechat");
                });

            modelBuilder.Entity("WireChat.Infrastructure.EntityFramework.Models.UserContactRequestReadModel", b =>
                {
                    b.Property<string>("SenderUserId")
                        .HasColumnType("text");

                    b.Property<string>("ReceiverUserId")
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.HasKey("SenderUserId", "ReceiverUserId");

                    b.HasIndex("ReceiverUserId");

                    b.ToTable("UserContactRequest", "wirechat");
                });

            modelBuilder.Entity("WireChat.Infrastructure.EntityFramework.Models.UserReadModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserFirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserLastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("UserPicture")
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("User", "wirechat");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WireChat.Infrastructure.EntityFramework.Models.UserReadModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WireChat.Infrastructure.EntityFramework.Models.UserReadModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WireChat.Infrastructure.EntityFramework.Models.UserReadModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WireChat.Infrastructure.EntityFramework.Models.UserReadModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WireChat.Infrastructure.EntityFramework.Models.AcceptedContactRequestNotificationReadModel", b =>
                {
                    b.HasOne("WireChat.Infrastructure.EntityFramework.Models.NotificationHubReadModel", "NotificationHub")
                        .WithMany("AcceptedContactRequestNotifications")
                        .HasForeignKey("NotificationHubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_NotificationHub_AcceptedContactRequestNotifications");

                    b.HasOne("WireChat.Infrastructure.EntityFramework.Models.UserReadModel", "Receiver")
                        .WithMany("ReceiverAcceptedContactRequestNotifications")
                        .HasForeignKey("ReceiverUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Receiver_ReceiverAcceptedContactRequestNotifications");

                    b.HasOne("WireChat.Infrastructure.EntityFramework.Models.UserReadModel", "Sender")
                        .WithMany("SenderAcceptedContactRequestNotifications")
                        .HasForeignKey("SenderUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Sender_SenderAcceptedContactRequestNotifications");

                    b.Navigation("NotificationHub");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("WireChat.Infrastructure.EntityFramework.Models.ActiveGroupNotificationReadModel", b =>
                {
                    b.HasOne("WireChat.Infrastructure.EntityFramework.Models.GroupReadModel", "Group")
                        .WithMany("ActiveGroupNotifications")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Group_ActiveGroupNotifications");

                    b.HasOne("WireChat.Infrastructure.EntityFramework.Models.NotificationHubReadModel", "NotificationHub")
                        .WithMany("ActiveGroupNotifications")
                        .HasForeignKey("NotificationHubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_NotificationHub_ActiveGroupNotifications");

                    b.Navigation("Group");

                    b.Navigation("NotificationHub");
                });

            modelBuilder.Entity("WireChat.Infrastructure.EntityFramework.Models.AddedGroupMemberNotificationReadModel", b =>
                {
                    b.HasOne("WireChat.Infrastructure.EntityFramework.Models.UserReadModel", "GroupAdmin")
                        .WithMany("GroupAdminAddedGroupMemberNotifications")
                        .HasForeignKey("GroupAdminUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_GroupAdmin_GroupAdminAddedGroupMemberNotifications");

                    b.HasOne("WireChat.Infrastructure.EntityFramework.Models.GroupReadModel", "Group")
                        .WithMany("AddedGroupMemberNotifications")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Group_AddedGroupMemberNotifications");

                    b.HasOne("WireChat.Infrastructure.EntityFramework.Models.UserReadModel", "GroupMember")
                        .WithMany("GroupMemberAddedGroupMemberNotifications")
                        .HasForeignKey("GroupMemberUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_GroupMember_GroupMemberAddedGroupMemberNotifications");

                    b.HasOne("WireChat.Infrastructure.EntityFramework.Models.NotificationHubReadModel", "NotificationHub")
                        .WithMany("AddedGroupMemberNotifications")
                        .HasForeignKey("NotificationHubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_NotificationHub_AddedGroupMemberNotifications");

                    b.Navigation("Group");

                    b.Navigation("GroupAdmin");

                    b.Navigation("GroupMember");

                    b.Navigation("NotificationHub");
                });

            modelBuilder.Entity("WireChat.Infrastructure.EntityFramework.Models.BannedContactNotificationReadModel", b =>
                {
                    b.HasOne("WireChat.Infrastructure.EntityFramework.Models.ChatReadModel", "Chat")
                        .WithMany("BannedContactNotifications")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Chat_BannedContactNotifications");

                    b.HasOne("WireChat.Infrastructure.EntityFramework.Models.NotificationHubReadModel", "NotificationHub")
                        .WithMany("BannedContactNotifications")
                        .HasForeignKey("NotificationHubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_NotificationHub_BannedContactNotifications");

                    b.HasOne("WireChat.Infrastructure.EntityFramework.Models.UserReadModel", "User")
                        .WithMany("BannedContactNotifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_User_BannedContactNotifications");

                    b.HasOne("WireChat.Infrastructure.EntityFramework.Models.ChatUserReadModel", null)
                        .WithMany("BannedContactNotifications")
                        .HasForeignKey("ChatUserReadModelUserId", "ChatUserReadModelChatId");

                    b.Navigation("Chat");

                    b.Navigation("NotificationHub");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WireChat.Infrastructure.EntityFramework.Models.BannedGroupMemberNotificationReadModel", b =>
                {
                    b.HasOne("WireChat.Infrastructure.EntityFramework.Models.UserReadModel", "GroupAdmin")
                        .WithMany("GroupAdminBannedGroupMemberNotifications")
                        .HasForeignKey("GroupAdminUserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("FK_GroupAdmin_GroupAdminBannedGroupMemberNotifications");

                    b.HasOne("WireChat.Infrastructure.EntityFramework.Models.GroupReadModel", "Group")
                        .WithMany("BannedGroupMemberNotifications")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Group_BannedGroupMemberNotifications");

                    b.HasOne("WireChat.Infrastructure.EntityFramework.Models.UserReadModel", "GroupMember")
                        .WithMany("GroupMemberBannedGroupMemberNotifications")
                        .HasForeignKey("GroupMemberId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_GroupMember_GroupMemberBannedGroupMemberNotifications");

                    b.HasOne("WireChat.Infrastructure.EntityFramework.Models.NotificationHubReadModel", "NotificationHub")
                        .WithMany("BannedGroupMemberNotifications")
                        .HasForeignKey("NotificationHubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_NotificationHub_BannedGroupMemberNotifications");

                    b.Navigation("Group");

                    b.Navigation("GroupAdmin");

                    b.Navigation("GroupMember");

                    b.Navigation("NotificationHub");
                });

            modelBuilder.Entity("WireChat.Infrastructure.EntityFramework.Models.BlockedChatUserReadModel", b =>
                {
                    b.HasOne("WireChat.Infrastructure.EntityFramework.Models.ChatReadModel", "Chat")
                        .WithMany("BlockedChatUsers")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Chat_BlockedChatUsers");

                    b.HasOne("WireChat.Infrastructure.EntityFramework.Models.UserReadModel", "User")
                        .WithMany("BlockedChatUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_User_BlockedChatUsers");

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WireChat.Infrastructure.EntityFramework.Models.ChatMessageReadModel", b =>
                {
                    b.HasOne("WireChat.Infrastructure.EntityFramework.Models.ChatReadModel", "Chat")
                        .WithMany("ChatMessages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Chat_ChatMessages");

                    b.HasOne("WireChat.Infrastructure.EntityFramework.Models.UserReadModel", "User")
                        .WithMany("ChatMessages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_User_ChatMessages");

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WireChat.Infrastructure.EntityFramework.Models.ChatUserReadModel", b =>
                {
                    b.HasOne("WireChat.Infrastructure.EntityFramework.Models.ChatReadModel", "Chat")
                        .WithMany("ChatUsers")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Chat_ChatUsers");

                    b.HasOne("WireChat.Infrastructure.EntityFramework.Models.UserReadModel", "User")
                        .WithMany("ChatUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_User_ChatUsers");

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WireChat.Infrastructure.EntityFramework.Models.CreatedGroupNotificationReadModel", b =>
                {
                    b.HasOne("WireChat.Infrastructure.EntityFramework.Models.GroupReadModel", "Group")
                        .WithMany("CreatedGroupNotifications")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Group_CreatedGroupNotifications");

                    b.HasOne("WireChat.Infrastructure.EntityFramework.Models.NotificationHubReadModel", "NotificationHub")
                        .WithMany("CreatedGroupNotifications")
                        .HasForeignKey("NotificationHubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_NotificationHub_CreatedGroupNotifications");

                    b.HasOne("WireChat.Infrastructure.EntityFramework.Models.UserReadModel", "User")
                        .WithMany("CreatedGroupNotifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_User_CreatedGroupNotifications");

                    b.Navigation("Group");

                    b.Navigation("NotificationHub");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WireChat.Infrastructure.EntityFramework.Models.DeclinedContactRequestNotificationReadModel", b =>
                {
                    b.HasOne("WireChat.Infrastructure.EntityFramework.Models.NotificationHubReadModel", "NotificationHub")
                        .WithMany("DeclinedContactRequestNotifications")
                        .HasForeignKey("NotificationHubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_NotificationHub_DeclinedContactRequestNotifications");

                    b.HasOne("WireChat.Infrastructure.EntityFramework.Models.UserReadModel", "Receiver")
                        .WithMany("ReceiverDeclinedContactRequestNotifications")
                        .HasForeignKey("ReceiverUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Receiver_ReceiverDeclinedContactRequestNotifications");

                    b.HasOne("WireChat.Infrastructure.EntityFramework.Models.UserReadModel", "Sender")
                        .WithMany("SenderDeclinedContactRequestNotifications")
                        .HasForeignKey("SenderUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Sender_SenderDeclinedContactRequestNotifications");

                    b.Navigation("NotificationHub");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("WireChat.Infrastructure.EntityFramework.Models.GroupReadModel", b =>
                {
                    b.HasOne("WireChat.Infrastructure.EntityFramework.Models.ChatReadModel", "Chat")
                        .WithOne()
                        .HasForeignKey("WireChat.Infrastructure.EntityFramework.Models.GroupReadModel", "GroupId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("FK_Group_Chat");

                    b.Navigation("Chat");
                });

            modelBuilder.Entity("WireChat.Infrastructure.EntityFramework.Models.IssuedContactRequestNotificationReadModel", b =>
                {
                    b.HasOne("WireChat.Infrastructure.EntityFramework.Models.NotificationHubReadModel", "NotificationHub")
                        .WithMany("IssuedContactRequestNotifications")
                        .HasForeignKey("NotificationHubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_NotificationHub_IssuedContactRequestNotifications");

                    b.HasOne("WireChat.Infrastructure.EntityFramework.Models.UserReadModel", "Receiver")
                        .WithMany("ReceiverIssuedContactRequestNotifications")
                        .HasForeignKey("ReceiverUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Receiver_ReceiverIssuedContactRequestNotifications");

                    b.HasOne("WireChat.Infrastructure.EntityFramework.Models.UserReadModel", "Sender")
                        .WithMany("SenderIssuedContactRequestNotifications")
                        .HasForeignKey("SenderUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Sender_SenderIssuedContactRequestNotifications");

                    b.Navigation("NotificationHub");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("WireChat.Infrastructure.EntityFramework.Models.ReceivedContactRequestNotificationReadModel", b =>
                {
                    b.HasOne("WireChat.Infrastructure.EntityFramework.Models.NotificationHubReadModel", "NotificationHub")
                        .WithMany("ReceivedContactRequestNotifications")
                        .HasForeignKey("NotificationHubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_NotificationHub_ReceivedContactRequestNotifications");

                    b.HasOne("WireChat.Infrastructure.EntityFramework.Models.UserReadModel", "Receiver")
                        .WithMany("ReceiverReceivedContactRequestNotifications")
                        .HasForeignKey("ReceiverUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Receiver_ReceiverReceivedContactRequestNotifications");

                    b.HasOne("WireChat.Infrastructure.EntityFramework.Models.UserReadModel", "Sender")
                        .WithMany("SenderReceivedContactRequestNotifications")
                        .HasForeignKey("SenderUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Sender_SenderReceivedContactRequestNotifications");

                    b.Navigation("NotificationHub");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("WireChat.Infrastructure.EntityFramework.Models.RemovedChatMessageNotificationReadModel", b =>
                {
                    b.HasOne("WireChat.Infrastructure.EntityFramework.Models.ChatReadModel", "Chat")
                        .WithMany("RemovedChatMessageNotifications")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Chat_RemovedChatMessageNotifications");

                    b.HasOne("WireChat.Infrastructure.EntityFramework.Models.ChatMessageReadModel", "ChatMessage")
                        .WithOne()
                        .HasForeignKey("WireChat.Infrastructure.EntityFramework.Models.RemovedChatMessageNotificationReadModel", "ChatMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ChatMessage_RemovedChatMessageNotification");

                    b.HasOne("WireChat.Infrastructure.EntityFramework.Models.NotificationHubReadModel", "NotificationHub")
                        .WithMany("RemovedChatMessageNotifications")
                        .HasForeignKey("NotificationHubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_NotificationHub_RemovedChatMessageNotifications");

                    b.HasOne("WireChat.Infrastructure.EntityFramework.Models.UserReadModel", "User")
                        .WithMany("RemovedChatMessageNotifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_User_RemovedChatMessageNotifications");

                    b.HasOne("WireChat.Infrastructure.EntityFramework.Models.ChatUserReadModel", null)
                        .WithMany("RemovedChatMessageNotifications")
                        .HasForeignKey("ChatUserReadModelUserId", "ChatUserReadModelChatId");

                    b.Navigation("Chat");

                    b.Navigation("ChatMessage");

                    b.Navigation("NotificationHub");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WireChat.Infrastructure.EntityFramework.Models.RemovedGroupMemberNotificationReadModel", b =>
                {
                    b.HasOne("WireChat.Infrastructure.EntityFramework.Models.UserReadModel", "GroupAdmin")
                        .WithMany("GroupAdminRemovedGroupMemberNotifications")
                        .HasForeignKey("GroupAdminUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_GroupAdmin_GroupAdminRemovedGroupMemberNotifications");

                    b.HasOne("WireChat.Infrastructure.EntityFramework.Models.GroupReadModel", "Group")
                        .WithMany("RemovedGroupMemberNotifications")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Group_RemovedGroupMemberNotifications");

                    b.HasOne("WireChat.Infrastructure.EntityFramework.Models.UserReadModel", "GroupMember")
                        .WithMany("GroupMemberRemovedGroupMemberNotifications")
                        .HasForeignKey("GroupMemberUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_GroupMember_GroupMemberRemovedGroupMemberNotifications");

                    b.HasOne("WireChat.Infrastructure.EntityFramework.Models.NotificationHubReadModel", "NotificationHub")
                        .WithMany("RemovedGroupMemberNotifications")
                        .HasForeignKey("NotificationHubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_NotificationHub_RemovedGroupMemberNotifications");

                    b.Navigation("Group");

                    b.Navigation("GroupAdmin");

                    b.Navigation("GroupMember");

                    b.Navigation("NotificationHub");
                });

            modelBuilder.Entity("WireChat.Infrastructure.EntityFramework.Models.UserContactRequestReadModel", b =>
                {
                    b.HasOne("WireChat.Infrastructure.EntityFramework.Models.UserReadModel", "Receiver")
                        .WithMany("ReceivedContactRequests")
                        .HasForeignKey("ReceiverUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Receiver_ReceivedContactRequests");

                    b.HasOne("WireChat.Infrastructure.EntityFramework.Models.UserReadModel", "Sender")
                        .WithMany("SendedContactRequests")
                        .HasForeignKey("SenderUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Sender_SendedContactRequests");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("WireChat.Infrastructure.EntityFramework.Models.ChatReadModel", b =>
                {
                    b.Navigation("BannedContactNotifications");

                    b.Navigation("BlockedChatUsers");

                    b.Navigation("ChatMessages");

                    b.Navigation("ChatUsers");

                    b.Navigation("RemovedChatMessageNotifications");
                });

            modelBuilder.Entity("WireChat.Infrastructure.EntityFramework.Models.ChatUserReadModel", b =>
                {
                    b.Navigation("BannedContactNotifications");

                    b.Navigation("RemovedChatMessageNotifications");
                });

            modelBuilder.Entity("WireChat.Infrastructure.EntityFramework.Models.GroupReadModel", b =>
                {
                    b.Navigation("ActiveGroupNotifications");

                    b.Navigation("AddedGroupMemberNotifications");

                    b.Navigation("BannedGroupMemberNotifications");

                    b.Navigation("CreatedGroupNotifications");

                    b.Navigation("RemovedGroupMemberNotifications");
                });

            modelBuilder.Entity("WireChat.Infrastructure.EntityFramework.Models.NotificationHubReadModel", b =>
                {
                    b.Navigation("AcceptedContactRequestNotifications");

                    b.Navigation("ActiveGroupNotifications");

                    b.Navigation("AddedGroupMemberNotifications");

                    b.Navigation("BannedContactNotifications");

                    b.Navigation("BannedGroupMemberNotifications");

                    b.Navigation("CreatedGroupNotifications");

                    b.Navigation("DeclinedContactRequestNotifications");

                    b.Navigation("IssuedContactRequestNotifications");

                    b.Navigation("ReceivedContactRequestNotifications");

                    b.Navigation("RemovedChatMessageNotifications");

                    b.Navigation("RemovedGroupMemberNotifications");
                });

            modelBuilder.Entity("WireChat.Infrastructure.EntityFramework.Models.UserReadModel", b =>
                {
                    b.Navigation("BannedContactNotifications");

                    b.Navigation("BlockedChatUsers");

                    b.Navigation("ChatMessages");

                    b.Navigation("ChatUsers");

                    b.Navigation("CreatedGroupNotifications");

                    b.Navigation("GroupAdminAddedGroupMemberNotifications");

                    b.Navigation("GroupAdminBannedGroupMemberNotifications");

                    b.Navigation("GroupAdminRemovedGroupMemberNotifications");

                    b.Navigation("GroupMemberAddedGroupMemberNotifications");

                    b.Navigation("GroupMemberBannedGroupMemberNotifications");

                    b.Navigation("GroupMemberRemovedGroupMemberNotifications");

                    b.Navigation("ReceivedContactRequests");

                    b.Navigation("ReceiverAcceptedContactRequestNotifications");

                    b.Navigation("ReceiverDeclinedContactRequestNotifications");

                    b.Navigation("ReceiverIssuedContactRequestNotifications");

                    b.Navigation("ReceiverReceivedContactRequestNotifications");

                    b.Navigation("RemovedChatMessageNotifications");

                    b.Navigation("SendedContactRequests");

                    b.Navigation("SenderAcceptedContactRequestNotifications");

                    b.Navigation("SenderDeclinedContactRequestNotifications");

                    b.Navigation("SenderIssuedContactRequestNotifications");

                    b.Navigation("SenderReceivedContactRequestNotifications");
                });
#pragma warning restore 612, 618
        }
    }
}
